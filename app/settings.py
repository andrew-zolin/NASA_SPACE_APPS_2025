"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from os import environ, path
import os 
from pathlib import Path

import sentry_sdk
from django.core.management.utils import get_random_secret_key
from django.templatetags.static import static
from dotenv import load_dotenv

######################################################################
# General
######################################################################
BASE_DIR = Path(__file__).resolve().parent.parent
# print(f"""BASE_DIR ls {os.listdir(BASE_DIR)}""")
# print(f"""ROOT_DIR ls {os.listdir(ROOT_DIR)}""")
# print(f"""{ROOT_DIR=}""")
ENV_FILE = ".env"
# print(f"""{ENV_FILE=}""")
load_dotenv(ENV_FILE)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(w2s-c8!83gq#$pamy1wy^%pstv8=)ei0-2+mowkk*wed&czkm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# print(f"""{ALLOWED_HOSTS=}""")

CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:5002", "https://admin.lovinad.com/", "https://nice-dingo-amazingly.ngrok-free.app"]
# print(f"""{CSRF_TRUSTED_ORIGINS=}""")

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5002",
    "https://nice-dingo-amazingly.ngrok-free.app",
    "http://127.0.0.1:8000", 
    "http://localhost:8000",
    "http://62.113.58.80:5757", 
    "http://62.113.58.80:5656",
    "https://admin.lovinad.com/" 
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'unfold',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [
            path.normpath(path.join(BASE_DIR, "lovinad/templates")),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME':  os.getenv("POSTGRES_DB"),
#         'USER': os.getenv("POSTGRES_USER"),
#         'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
#         'HOST': os.getenv("POSTGRES_HOST"),
#         'PORT': os.getenv("POSTGRES_PORT"),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / "app" / "static"]

STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_ROOT = BASE_DIR / "media"

MEDIA_URL = "/media/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CLOUDFLARE_ENDPOINT = os.getenv("CLOUDFLARE_ENDPOINT")
CLOUDFLARE_ACCOUNT_ID = os.getenv("CLOUDFLARE_ACCOUNT_ID")
CLOUDFLARE_ACCESS_KEY_ID = os.getenv("CLOUDFLARE_ACCESS_KEY_ID")
CLOUDFLARE_SECRET_ACCESS_KEY = os.getenv("CLOUDFLARE_ENDPOINT")
CLOUDFLARE_BUCKET = os.getenv("CLOUDFLARE_BUCKET")

UPSTASH_VECTOR_REST_URL = os.getenv("UPSTASH_VECTOR_REST_URL")
UPSTASH_VECTOR_REST_TOKEN = os.getenv("UPSTASH_VECTOR_REST_TOKEN")

# google_creds_path_str = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", str(BASE_DIR / "secrets/lovinad-53c3a36409cd.json"))
# if Path(google_creds_path_str).exists():
#     os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = google_creds_path_str
# else:
#     # В реальном продакшене здесь лучше вызывать критическую ошибку или использовать IAM-роли
#     print(f"WARNING: Google credentials file not found at {google_creds_path_str}", file=sys.stderr)


UNFOLD = {
    "SITE_TITLE": "Space Apps Explorer",
    "SITE_HEADER": "Space Apps Explorer",
    "SITE_URL": "/",
    "THEME": "dark",  # 'light' или 'dark'
    "SITE_SYMBOL": "speed",
    # "SITE_ICON": lambda request: static("images/logo.svg"), # Путь к вашему логотипу
    "SITE_FAVICONS": [ 
        {
            "rel": "icon",
            "type": "image/svg+xml",
            "href": lambda request: static("images/favicon.svg"), # Путь к вашему favicon
        },
    ],

    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": False, # Мы определим свою навигацию
        "navigation": [
            {
                "title": "Контент",
                "items": [
                    {
                        "title": "Изображения",
                        "icon": "photo_library",
                        "link": "admin:app_image_changelist",
                        "permission": lambda request: request.user.is_staff,
                    },
                    {
                        "title": "Объекты для поиска",
                        "icon": "travel_explore",
                        "link": "admin:app_searchableobject_changelist",
                        "permission": lambda request: request.user.is_staff,
                    },
                ]
            },
            {
                "title": "Пользовательский контент",
                "items": [
                    {
                        "title": "Точки интереса",
                        "icon": "fmd_good",
                        "link": "admin:app_pointofinterest_changelist",
                        "permission": lambda request: request.user.is_staff,
                    },
                    {
                        "title": "Комментарии",
                        "icon": "comment",
                        "link": "admin:app_comment_changelist",
                        "permission": lambda request: request.user.is_staff,
                    },
                ]
            },
            {
                "title": "Система и AI",
                "items": [
                    {
                        "title": "Взаимодействия с AI",
                        "icon": "auto_awesome",
                        "link": "admin:app_geminiinteraction_changelist",
                        "permission": lambda request: request.user.is_superuser, # Только для суперпользователей
                    },
                ]
            },
            {
                "title": "Администрирование",
                "items": [
                    {
                        "title": "Пользователи",
                        "icon": "group",
                        "link": "admin:auth_user_changelist",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Группы",
                        "icon": "shield",
                        "link": "admin:auth_group_changelist",
                        "permission": lambda request: request.user.is_superuser,
                    },
                ]
            },
        ]
    }
}